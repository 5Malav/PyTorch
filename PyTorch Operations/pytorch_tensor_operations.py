# -*- coding: utf-8 -*-
"""PyTorch Tensor Operations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ExpBpe8bc1M5qV6O2Hokb0p-ZC5vGvrv

# PyTorch  Tensor Operation Part - 1
"""

import torch
import numpy as np

"""
Indexing and Slicing

"""

x=torch.arange(6).reshape(3,2)
x

x[1][1]

type(x[1][1])

x[:,1]

x[:,1:] #to print column as column

x=torch.arange(10)
x

x.view(2,5)

x

x.reshape(2,5)

x

x=x.reshape(2,5)
x

x =  torch.arange(10)
x

x.shape

x.view(2,5)

z= x.view(2,5)
z
# view reflect most current data
# z in not linked with x

x

x[0]=9999
x

z

x =  torch.arange(10)
x

x.shape

x.view(2,-1)

# if we change size from 10 to 11 then x.view(2,-1)
# will show error
# Runtime error:- shape '[2,-1]' is invalid for input of size 11
# because 11 is not evenly divisible by 2

x.view(-1,5)

"""# Tensor Arithmetic"""

a = torch.tensor([1.,2.,3.])
a

b= torch.tensor([4.,5.,6.])
b

a+b

torch.add(a,b)

#a = a + b

a.mul(b)

a

a=a.mul(b)
a

a = a. mul_(b)
a

"""# PyTorch  Tensor Operation Part - 2"""

a = torch.tensor([1.,2.,3.])
a

b= torch.tensor([4.,5.,6.])
b

a * b # element wise operation

# this is not true way of matrix multiplication
# one way is dot product
# other is true 2D multiplication(shape should be same of 2
# matrix)

# dot product
a.dot(b)

a=torch.tensor([[0,2,4],[1,3,5]])
a

b=torch.tensor([[6,7],[8,9],[10,11]])
b

a.shape

b.shape

# no of columns in a matches with no of rows in b

torch.mm(a,b)

a @ b

# L2 Ecludiean norm

x = torch.tensor([2.,3.,4.,5.])
 x

x.norm()

x.numel()

len(x)

a=torch.tensor([[0,2,4],[1,3,5]])
a

len(a)

a.numel()